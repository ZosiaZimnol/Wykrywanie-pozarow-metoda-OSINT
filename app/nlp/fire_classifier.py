import unicodedata

# Rozbudowana lista s≈Ç√≥w kluczowych powiƒÖzanych z po≈ºarami
KEYWORDS = [
    # üá∫üá∏ English
    "fire", "wildfire", "forest fire", "bushfire", "house fire", "grass fire",
    "burning", "flames", "blaze", "inferno", "smoke", "evacuation", "evacuated",
    "firestorm", "heatwave", "heat wave", "firefighters", "first responders",
    "fire spread", "flaming", "ignited", "scorched", "charred", "sparked", "explosion",
    "wild fire", "wild-fire", "forest-fire", "fire emergency", "fire danger", "wildfires",

    # üáµüá± Polish
    "po≈ºar", "pozar", "pali siƒô", "p≈Çonie", "ogie≈Ñ", "ognisko", "dym", "zadymienie",
    "ewakuacja", "stra≈º po≈ºarna", "straz pozarna", "gaszenie", "po≈ºar lasu",
    "p≈ÇonƒÖcy", "sp≈ÇonƒÖ≈Ç", "sp≈Çonƒô≈Ça", "pozar lasu", "pozar budynku", "pozar mieszkania",

    # üá´üá∑ French
    "incendie", "feu", "fum√©e", "√©vacuation", "br√ªler",

    # üá™üá∏ Spanish
    "incendio", "fuego", "humo", "evacuaci√≥n", "arder",

    # üá©üá™ German
    "brand", "feuer", "rauch", "evakuierung", "verbrennung",

    # üáµüáπ Portuguese
    "inc√™ndio", "fogo", "fuma√ßa", "evacua√ß√£o",

    # üáÆüáπ Italian
    "incendio", "fuoco", "fumo", "evacuazione", "bruciare",

    # Emoji / symbole
    "üî•", "üöí", "üå≤üî•"
]


def normalize_text(text: str) -> str:
    """
    Usuwa znaki diakrytyczne (np. ƒÖ -> a) i zamienia tekst na ma≈Çe litery.
    """
    return ''.join(
        c for c in unicodedata.normalize('NFD', text.lower())
        if unicodedata.category(c) != 'Mn'
    )


def is_fire_related(text: str) -> bool:
    """
    Sprawdza, czy dany tekst zawiera kt√≥rekolwiek ze s≈Ç√≥w kluczowych zwiƒÖzanych z po≈ºarem.
    """
    normalized = normalize_text(text)
    return any(keyword in normalized for keyword in KEYWORDS)
